@page
@using Uzduotis01;
@model CarRental_FrontEnd.RentsModel
@{
    DateTime? dateTo;
    DateTime dateToNotNull;
    List<int> csVehicleIDs = new();
    List<int> csClientIDs = new();
    int temp = 0;
}

<div align="center">
    <h2>All Rents</h2>

    <h4><button onclick="toggleFormDisplay('form0')">Rent a new Vehicle</button></h4>

    <div id="form0" style="display:none">
        <form id="registerForm0">
            <label for="VehicleID">Vehicle ID</label>
            <input type="number" id="VehicleID" name="VehicleID" />
            <br />
            <label for="ClientID">Client ID</label>
            <input type="number" id="ClientID" name="ClientID" />
            <br />
            <label for="DateFrom">Date From</label>
            <input type="date" id="DateFrom" name="DateFrom"/>
            <br />
            <label for="DateTo">Date To</label>
            <input type="date" id="DateTo" name="DateTo"/>
            <br />
            <br />
            <button type="submit">Register</button>
        </form>
    </div>

    @if (Model.Rents != null)
    {
        <table class="styled-table">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Vehicle ID</th>
                    <th>Client ID</th>
                    <th>Date Frome</th>
                    <th>Date To</th>
                </tr>
            </thead>
            @foreach (Rent rent in Model.Rents)
            {
                <tr>
                    <td>@rent.GetID()</td>
                    <td>@{
                            temp = rent.GetVehicleID();
                            csVehicleIDs.Add(temp);
                        }
                        <p>@temp</p>
                    </td>
                    <td>@{
                            temp = rent.GetClientID();
                            csClientIDs.Add(temp);
                        }
                        <p>@temp</p>
                    </td>
                    <td>@rent.GetDateFrom().ToString("yyyy-MM-dd")</td>
                    <td>
                        @{ dateTo = rent.GetDateTo(); }
                        
                        @if (dateTo == null)
                        {
                            <p>Open-Ended Agreement</p>
                        }
                        else
                        {
                            dateToNotNull = (DateTime)dateTo;
                            <p>@dateToNotNull.ToString("yyyy-MM-dd")</p>
                        }
                    </td>
                </tr>
            }
        </table>
    }
    else
    {
        <p>Business is a bit quiet :(</p>
    }
</div>

<script>
    validateForm('registerForm0');

    function validateForm(id) {
        document.getElementById(id).addEventListener('submit', async function (event) {
            event.preventDefault(); // Prevent default form submission

            const vehicleID = document.getElementById('VehicleID').value;
            const clientID = document.getElementById('ClientID').value;
            const dateFrom = document.getElementById('DateFrom').value;
            const dateTo = document.getElementById('DateTo').value;

            // Check if vehicle ID exists
            if (!VehicleIDExistsJS(vehicleID)) { 
                alert('Please enter an existing Vehicle ID.');
                return false;
            }

            // Check if client ID exists
            if (!ClientIDExistsJS(clientID)) {
                alert('Please enter an existing Client ID.');
                return false;
            }

            // Basic form validation
            if (dateFrom < Date.now || dateTo < dateFrom) {
                alert('Please enter valid dates.');
                return false;
            }

            // Create the request payload
            const formData = new FormData();
            formData.append('VehicleID', vehicleID);
            formData.append('ClientID', clientID);
            formData.append('PersonDateFromalID', dateFrom);
            formData.append('DateTo', dateTo);

            try {
                const response = await fetch('https://localhost:7243/api/RentService/RegisterRent', {
                    method: 'POST',
                    mode: 'no-cors',
                    headers: { 'Content-Type': 'application/json' },
                    body: formData
                });

                // Handle successful response
                alert('Registration successful!');
                window.location.reload('https://localhost:7196/Clients');
            } catch (error) {
                console.error('Error:', error);
                alert('An error occurred. Please try again.');
            }
        });
    }

    // // Broken
    // function VehicleIDExistsJS(id)
    // {
    //     const vehicleIDs = [];
    //     vehicleIDs  = @csVehicleIDs;

    //     for (let i = 0; i < vehicleIDs.length; i++) { 
    //         if (id === vehicleIDs[i]) { 
    //             return true;}
    //     }
    //     return false;
    // }

    // // Broken
    // function ClientIDExistsJS(id) {
    //     const clientIDs = [];
    //     clientIDs = @csClientIDs;

    //     for (let i = 0; i < clientIDs.length; i++) {
    //         if (id === clientIDs[i]) {
    //             return true;
    //         }
    //     }
    //     return false;
    // }

    function toggleFormDisplay(id) {
        var element = document.getElementById(id);
        if (element.style.display === "none") {
            element.style.display = "block";
        }
        else {
            element.style.display = "none";
        }
    }
</script>